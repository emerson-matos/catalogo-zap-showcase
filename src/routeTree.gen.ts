/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as FlipbookRouteImport } from './routes/flipbook'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as ProductsProductIdRouteImport } from './routes/products/$productId'
import { Route as LayoutSearchRouteImport } from './routes/_layout/search'
import { Route as LayoutLoginRouteImport } from './routes/_layout/login'
import { Route as LayoutExamplesRouteImport } from './routes/_layout/examples'
import { Route as LayoutContactRouteImport } from './routes/_layout/contact'
import { Route as LayoutAboutRouteImport } from './routes/_layout/about'

const FlipbookRoute = FlipbookRouteImport.update({
  id: '/flipbook',
  path: '/flipbook',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsProductIdRoute = ProductsProductIdRouteImport.update({
  id: '/products/$productId',
  path: '/products/$productId',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutSearchRoute = LayoutSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutLoginRoute = LayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutExamplesRoute = LayoutExamplesRouteImport.update({
  id: '/examples',
  path: '/examples',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutContactRoute = LayoutContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutAboutRoute = LayoutAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/flipbook': typeof FlipbookRoute
  '/about': typeof LayoutAboutRoute
  '/contact': typeof LayoutContactRoute
  '/examples': typeof LayoutExamplesRoute
  '/login': typeof LayoutLoginRoute
  '/search': typeof LayoutSearchRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/products': typeof ProductsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/flipbook': typeof FlipbookRoute
  '/about': typeof LayoutAboutRoute
  '/contact': typeof LayoutContactRoute
  '/examples': typeof LayoutExamplesRoute
  '/login': typeof LayoutLoginRoute
  '/search': typeof LayoutSearchRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/products': typeof ProductsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/admin': typeof AdminRoute
  '/flipbook': typeof FlipbookRoute
  '/_layout/about': typeof LayoutAboutRoute
  '/_layout/contact': typeof LayoutContactRoute
  '/_layout/examples': typeof LayoutExamplesRoute
  '/_layout/login': typeof LayoutLoginRoute
  '/_layout/search': typeof LayoutSearchRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/products/': typeof ProductsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/flipbook'
    | '/about'
    | '/contact'
    | '/examples'
    | '/login'
    | '/search'
    | '/products/$productId'
    | '/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/flipbook'
    | '/about'
    | '/contact'
    | '/examples'
    | '/login'
    | '/search'
    | '/products/$productId'
    | '/products'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/admin'
    | '/flipbook'
    | '/_layout/about'
    | '/_layout/contact'
    | '/_layout/examples'
    | '/_layout/login'
    | '/_layout/search'
    | '/products/$productId'
    | '/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  AdminRoute: typeof AdminRoute
  FlipbookRoute: typeof FlipbookRoute
  ProductsProductIdRoute: typeof ProductsProductIdRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/flipbook': {
      id: '/flipbook'
      path: '/flipbook'
      fullPath: '/flipbook'
      preLoaderRoute: typeof FlipbookRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$productId': {
      id: '/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductsProductIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/search': {
      id: '/_layout/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof LayoutSearchRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/login': {
      id: '/_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LayoutLoginRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/examples': {
      id: '/_layout/examples'
      path: '/examples'
      fullPath: '/examples'
      preLoaderRoute: typeof LayoutExamplesRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/contact': {
      id: '/_layout/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof LayoutContactRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/about': {
      id: '/_layout/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof LayoutAboutRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutAboutRoute: typeof LayoutAboutRoute
  LayoutContactRoute: typeof LayoutContactRoute
  LayoutExamplesRoute: typeof LayoutExamplesRoute
  LayoutLoginRoute: typeof LayoutLoginRoute
  LayoutSearchRoute: typeof LayoutSearchRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAboutRoute: LayoutAboutRoute,
  LayoutContactRoute: LayoutContactRoute,
  LayoutExamplesRoute: LayoutExamplesRoute,
  LayoutLoginRoute: LayoutLoginRoute,
  LayoutSearchRoute: LayoutSearchRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
  AdminRoute: AdminRoute,
  FlipbookRoute: FlipbookRoute,
  ProductsProductIdRoute: ProductsProductIdRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
