/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProductsRouteImport } from './routes/products'
import { Route as FlipbookRouteImport } from './routes/flipbook'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as ProductsSearchRouteImport } from './routes/products/search'
import { Route as ProductsIdRouteImport } from './routes/products/$id'
import { Route as AdminProductsRouteImport } from './routes/admin/products'

const ProductsRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const FlipbookRoute = FlipbookRouteImport.update({
  id: '/flipbook',
  path: '/flipbook',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProductsRoute,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const ProductsSearchRoute = ProductsSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => ProductsRoute,
} as any)
const ProductsIdRoute = ProductsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ProductsRoute,
} as any)
const AdminProductsRoute = AdminProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/contact': typeof ContactRoute
  '/flipbook': typeof FlipbookRoute
  '/products': typeof ProductsRouteWithChildren
  '/admin/products': typeof AdminProductsRoute
  '/products/$id': typeof ProductsIdRoute
  '/products/search': typeof ProductsSearchRoute
  '/admin/': typeof AdminIndexRoute
  '/products/': typeof ProductsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/flipbook': typeof FlipbookRoute
  '/admin/products': typeof AdminProductsRoute
  '/products/$id': typeof ProductsIdRoute
  '/products/search': typeof ProductsSearchRoute
  '/admin': typeof AdminIndexRoute
  '/products': typeof ProductsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/contact': typeof ContactRoute
  '/flipbook': typeof FlipbookRoute
  '/products': typeof ProductsRouteWithChildren
  '/admin/products': typeof AdminProductsRoute
  '/products/$id': typeof ProductsIdRoute
  '/products/search': typeof ProductsSearchRoute
  '/admin/': typeof AdminIndexRoute
  '/products/': typeof ProductsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/admin'
    | '/contact'
    | '/flipbook'
    | '/products'
    | '/admin/products'
    | '/products/$id'
    | '/products/search'
    | '/admin/'
    | '/products/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/flipbook'
    | '/admin/products'
    | '/products/$id'
    | '/products/search'
    | '/admin'
    | '/products'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/admin'
    | '/contact'
    | '/flipbook'
    | '/products'
    | '/admin/products'
    | '/products/$id'
    | '/products/search'
    | '/admin/'
    | '/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AdminRoute: typeof AdminRouteWithChildren
  ContactRoute: typeof ContactRoute
  FlipbookRoute: typeof FlipbookRoute
  ProductsRoute: typeof ProductsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flipbook': {
      id: '/flipbook'
      path: '/flipbook'
      fullPath: '/flipbook'
      preLoaderRoute: typeof FlipbookRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/'
      fullPath: '/products/'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof ProductsRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/products/search': {
      id: '/products/search'
      path: '/search'
      fullPath: '/products/search'
      preLoaderRoute: typeof ProductsSearchRouteImport
      parentRoute: typeof ProductsRoute
    }
    '/products/$id': {
      id: '/products/$id'
      path: '/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof ProductsIdRouteImport
      parentRoute: typeof ProductsRoute
    }
    '/admin/products': {
      id: '/admin/products'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminProductsRoute: typeof AdminProductsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminProductsRoute: AdminProductsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface ProductsRouteChildren {
  ProductsIdRoute: typeof ProductsIdRoute
  ProductsSearchRoute: typeof ProductsSearchRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

const ProductsRouteChildren: ProductsRouteChildren = {
  ProductsIdRoute: ProductsIdRoute,
  ProductsSearchRoute: ProductsSearchRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}

const ProductsRouteWithChildren = ProductsRoute._addFileChildren(
  ProductsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AdminRoute: AdminRouteWithChildren,
  ContactRoute: ContactRoute,
  FlipbookRoute: FlipbookRoute,
  ProductsRoute: ProductsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
